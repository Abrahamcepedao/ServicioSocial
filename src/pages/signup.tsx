//Next
import Head from 'next/head'
import Image from 'next/image';
import Link from 'next/link';
import { useTheme } from 'next-themes';
import { useRouter } from 'next/router';

//React
import React, { useState, useEffect } from 'react'

//Material UI
import Snackbar from '@mui/material/Snackbar';
import MuiAlert, { AlertProps } from '@mui/material/Alert';
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';

//Material UI - icons
import EmailRoundedIcon from '@mui/icons-material/EmailRounded';
import PersonRoundedIcon from '@mui/icons-material/PersonRounded';
import LocalPhoneRoundedIcon from '@mui/icons-material/LocalPhoneRounded';
import LockRoundedIcon from '@mui/icons-material/LockRounded';
import KeyRoundedIcon from '@mui/icons-material/KeyRounded';

//Assets
import Logo from '../../public/logo.png'
import LogoW from '../../public/logo_w.png'

//Context
import { useAuth } from '@/context/AuthContext';

//Alert
const Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(
  props,
  ref,
) {
  return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

export default function SignUp() {
    //Router
    const router = useRouter()

    //context
    const { user, signupStudent, signupPartner, signupAdmin } = useAuth()

    //Theme
    const { theme } = useTheme()

    //useState - formData
    const [formData, setFormData] = useState({
      mail: "",
      matricula: "",
      key: "",
      password: "",
      confirmPassword: "",
      type: "admin" //admin, user, socio
    })

    //useState - alert open
    const [utils, setUtils] = useState({
      open: false,
      message: "",
      severity: "error"
    })

    //useEffect
    useEffect(() => {
        if(user !== null && user !== undefined) {
            if(user.type === "student") {
              router.push('/student/dashboard')
            } else if(user.type === "admin") {
              router.push('/admin/dashboard')
            } else {
              router.push('/partner/dashboard')
            }
            
        }
    },[user])

    /* handle alert close */
    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {
      if (reason === 'clickaway') {
        return;
      }

      setUtils({...utils, open: false});
    };

    /* handle input change */
    const handleInputChange = (e:React.ChangeEvent<HTMLInputElement>) => {
      setFormData({
        ...formData,
        [e.target.name] : e.target.value
      })
    }

    /* verify and validate form data */
    const verifyForm = () => {
      if(formData.password !== formData.confirmPassword) {
        setUtils({
          ...utils,
          open: true,
          message: "Las contraseñas deben coincidir",
          severity: "error"
        })
        return false
      }
      //validate mail

      //validate phone

      //validate name

      return true
    }

    /* handle sign up */
    const handleSignUp = (e:React.FormEvent<HTMLFormElement>) => {
      e.preventDefault()
      if(verifyForm()) {
        if(formData.type === "student") {
          signupStudent(formData.mail, formData.password, formData.matricula)
        } else if(formData.type === "partner") {
          signupPartner(formData.mail, formData.password, formData.key)
        } else {
          signupAdmin(formData.mail, formData.password)
        }
        
      }
    }

    return (
      <>
        <Head>
          <title>Servicio Social - ITESM</title>
          <meta name="description" content="Generated by create next app" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className='p-5 bg-light dark:bg-dark'>
          <div className='flex flex-col items-center justify-between min-h-screen p-20'>
              <div className='mb-20'>
                <Image src={theme === "light" ? Logo : LogoW} width={200} height={140} alt="Servicio Social"/>
                {/* <ThemeToggler /> */}
              </div>
              <div className='flex flex-col items-center justify-center flex-1'>
                <form onSubmit={(e) => {handleSignUp(e)}} className="flex-1 max-h-96" autoComplete='off'>
                    {/* user type */}
                    <FormControl>
                      <label id="type" className='text-black dark:text-white input__label'>Selecciona el tipo de usuario</label>
                      <RadioGroup
                        row
                        aria-labelledby="type"
                        name="type"
                        value={formData.type}
                        onChange={handleInputChange}
                      >
                        <FormControlLabel value="student" control={<Radio />} label="Alumno" />
                        <FormControlLabel value="partner" control={<Radio />} label="Socio" />
                        <FormControlLabel value="admin" control={<Radio />} label="Admin" />
                      </RadioGroup>
                    </FormControl>
                    <div className='grid grid-cols-2 gap-4 mb-8'>
                        <div className='input__container '>
                          <EmailRoundedIcon/>
                          <input 
                            name='mail' placeholder='Ingrese su mail'
                            autoComplete='off'
                            value={formData.mail} onChange={(e) => {handleInputChange(e)}}
                            className="input"
                          />
                        </div>
                        {formData.type === "student" && (
                          <div className='input__container '>
                            <PersonRoundedIcon/>
                            <input 
                              name='matricula' placeholder='Ingrese su matrícula'
                              autoComplete='off'
                              value={formData.matricula} onChange={(e) => {handleInputChange(e)}}
                              className="input"
                            />
                          </div>
                        )}
                        {formData.type === "partner" && (
                          <div className='input__container '>
                            <KeyRoundedIcon/>
                            <input 
                              name='key' placeholder='Ingrese su clave'
                              autoComplete='off'
                              value={formData.key} onChange={(e) => {handleInputChange(e)}}
                              className="input"
                            />
                          </div>
                        )}
                        <div className='input__container '>
                          <LockRoundedIcon/>
                          <input 
                            name='password' placeholder='Ingrese su contraseña'
                            type="password" autoComplete='new-password'
                            value={formData.password} onChange={(e) => {handleInputChange(e)}}
                            className="input"
                          />
                        </div>
                        <div className='input__container '>
                          <LockRoundedIcon/>
                          <input 
                            name='confirmPassword' placeholder='Confirme su contraseña'
                            type="password" autoComplete='new-password'
                            value={formData.confirmPassword} onChange={(e) => {handleInputChange(e)}}
                            className="input"
                          />
                        </div>
                    </div>
                    
                    <div className='text-center'>
                      <button className='button bg-primary text-white' type='submit'>Registrarse</button>
                      <div className='flex justify-center items-center mt-4'>
                          <p className='mr-2'>¿Ya tienes cuenta?</p> 
                          <Link href='/' className='text-primary underline'> Inicia sesión</Link>
                      </div>
                    </div>
                    
                </form>
              </div>
          </div>

          {/* alert */}
          <Snackbar open={utils.open} autoHideDuration={6000} onClose={handleClose}>
            {/* @ts-ignore */}
            <Alert onClose={handleClose} severity={utils.severity} sx={{ width: '100%' }}>
              {utils.message}
            </Alert>
          </Snackbar>
        </main>
      </>
    )
}
